"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[31842],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},13842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>d});t(67294);var r=t(3905);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using refine and React95 UI.",slug:"awesome-react-windows95-ui-with-refine",authors:"melih",tags:["refine","react","supabase","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/social.jpg",hide_table_of_contents:!1},l=void 0,u={permalink:"/blog/awesome-react-windows95-ui-with-refine",source:"@site/blog/2022-03-22-refine-with-react95.md",title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using refine and React95 UI.",date:"2022-03-22T00:00:00.000Z",formattedDate:"March 22, 2022",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"react",permalink:"/blog/tags/react"},{label:"supabase",permalink:"/blog/tags/supabase"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:14.84,hasTruncateMarker:!1,authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],frontMatter:{title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using refine and React95 UI.",slug:"awesome-react-windows95-ui-with-refine",authors:"melih",tags:["refine","react","supabase","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/social.jpg",hide_table_of_contents:!1},prevItem:{title:"How to Multipart File Upload Using FormData with React Hook Form",permalink:"/blog/how-to-multipart-file-upload-with-react-hook-form"},nextItem:{title:"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application",permalink:"/blog/best-internal-tool-react-frameworks"},relatedPosts:[{title:"When to use dangerouslySetInnerHTML in React?",description:"Find out when to use dangerouslySetInnerHTML in React and how it can help avoid XSS attacks.",permalink:"/blog/use-react-dangerouslysetinnerhtml",formattedDate:"September 25, 2022",authors:[{name:"Clara Ekekenta",title:"Software Engineer",imageURL:"/img/generic-profile.png",key:"clara_ekekenta"}],readingTime:5.36,date:"2022-09-25T00:00:00.000Z"},{title:"How to Become A Production Hero as Developer with refine in 2022",description:"Focus on your production, Everything you need is in Refine.",permalink:"/blog/how-to-become-a-production-hero-refine-2022",formattedDate:"February 21, 2022",authors:[{name:"Melih \xd6zkalay",title:"Frontend Developer",url:"https://github.com/ozkalai",imageURL:"https://github.com/ozkalai.png",key:"ozkalai"}],readingTime:2.03,date:"2022-02-21T00:00:00.000Z"},{title:"Beginner's Guide to React Query",description:"We'll be looking at the basics of React Query, how to use it, and why you should use it.",permalink:"/blog/react-query-guide",formattedDate:"July 4, 2023",authors:[{name:"Marvel Ken",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"marvel_ken"}],readingTime:9.64,date:"2023-07-04T00:00:00.000Z"}],authorPosts:[{title:"ReactJS Frameworks You Should Know Before Start Developing B2B/Internal Application",description:"We have listed Open source ReactJS frameworks that will help and speed you up while developing internal-tool applications.",permalink:"/blog/best-internal-tool-react-frameworks",formattedDate:"March 16, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:4.125,date:"2022-03-16T00:00:00.000Z"},{title:"Refine vs React-Admin Which is Better for Your Project?",description:"We will compare the features of refine and react-admin",permalink:"/blog/refine-vs-react-admin",formattedDate:"November 26, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:14.97,date:"2021-11-26T00:00:00.000Z"},{title:"How to Import CSV File with React",description:"In this guide, I will show you how to import CSV files using React and JavaScript.",permalink:"/blog/how-to-import-csv",formattedDate:"January 18, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:4.44,date:"2022-01-18T00:00:00.000Z"}]},p={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Manually Project Setup",id:"manually-project-setup",level:3},{value:"Usage",id:"usage",level:2},{value:"Supabase Client",id:"supabase-client",level:3},{value:"AuthProvider",id:"authprovider",level:3},{value:"Configure Refine for Supabase",id:"configure-refine-for-supabase",level:3},{value:"React95 Setup",id:"react95-setup",level:3},{value:"Refine Login Page",id:"refine-login-page",level:2},{value:"Refine Post Page",id:"refine-post-page",level:2},{value:"Refine Create and Edit Page",id:"refine-create-and-edit-page",level:2},{value:"Customize Refine Layout",id:"customize-refine-layout",level:2},{value:"Project Overview",id:"project-overview",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:d};function m(e){var{components:n}=e,t=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){a(e,n,t[n])}))}return e}({},c,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,r.kt)("strong",{parentName:"p"},"refine"),". Although we plan to update it with the latest version of ",(0,r.kt)("strong",{parentName:"p"},"refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,r.kt)("p",{parentName:"admonition"},"You should know that ",(0,r.kt)("strong",{parentName:"p"},"refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),"."),(0,r.kt)("p",{parentName:"admonition"},"Just be aware that the source code example in this post have been updated to version 4.x.x.")),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/overview.gif",alt:"Refine Overview"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("strong",{parentName:"p"},"refine"),"'s ",(0,r.kt)("strong",{parentName:"p"},"headless")," feature, you can include any UI in your project and take full advantage of all its features without worrying about compatibility. To build a project with a vintage ",(0,r.kt)("inlineCode",{parentName:"p"},"Windows95")," style using ",(0,r.kt)("a",{parentName:"p",href:"https://react95.io/"},"React95")," UI components, we'll use the ",(0,r.kt)("strong",{parentName:"p"},"refine")," headless feature."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"In this tutorial, we will use ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/"},"Supabase")," Database in the backend of our project. Our goal with this is to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Windows95"),"-style admin panel using ",(0,r.kt)("strong",{parentName:"p"},"refine")," ",(0,r.kt)("strong",{parentName:"p"},"headless")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/examples/data-provider/supabase/"},(0,r.kt)("strong",{parentName:"a"},"refine")," Supabase Data Provider")," features."),(0,r.kt)("h2",{id:"project-setup"},"Project Setup"),(0,r.kt)("p",null,"Let's start by creating our ",(0,r.kt)("strong",{parentName:"p"},"refine")," project. You can use the superplate to create a refine project. superplate will quickly create our ",(0,r.kt)("strong",{parentName:"p"},"refine")," project according to the features we choose."),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/refine_setup.gif",alt:"Refine Project Setup"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"That's it! After the installation process is finished, our ",(0,r.kt)("strong",{parentName:"p"},"refine")," project is ready. In addition, Supabase Data Provider features will also come ready. As we mentioned above, since we are using the headless feature of ",(0,r.kt)("strong",{parentName:"p"},"refine"),", we will manage the UI processes ourselves. In this project, we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"React95")," for the UI. Let's continue by installing the necessary packages in our ",(0,r.kt)("strong",{parentName:"p"},"refine")," Project directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i react95 styled-components\n")),(0,r.kt)("h3",{id:"manually-project-setup"},"Manually Project Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @refinedev/core @refinedev/supabase\n\nnpm install react95 styled-components\n")),(0,r.kt)("p",null,"Let's begin editing our project now that it's ready to use."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine"),", automatically creates ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AuthProvider")," for you. All you have to do is define your Database URL and Secret_Key. You can see how to use it in detail below."),(0,r.kt)("h3",{id:"supabase-client"},"Supabase Client"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/supabaseClient.ts"',title:'"src/utility/supabaseClient.ts"'},'import { createClient } from "@refinedev/supabase";\n\nconst SUPABASE_URL = "YOUR_DATABASE_URL";\nconst SUPABASE_KEY = "YOUR_SUPABASE_KEY";\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\n    db: {\n        schema: "public",\n    },\n    auth: {\n        persistSession: true,\n    },\n});\n')))),(0,r.kt)("h3",{id:"authprovider"},"AuthProvider"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/authProvider.ts"',title:'"src/authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nimport { supabaseClient } from "utility";\n\nconst authProvider: AuthBindings = {\n    login: async ({ username, password }) => {\n        const { user, error } = await supabaseClient.auth.signIn({\n            email: username,\n            password,\n        });\n\n        if (error) {\n            return {\n                success: false,\n                error: error || new Error("Invalid email or password"),\n            };\n        }\n\n        if (data?.user) {\n            return {\n                success: true,\n                redirectTo: "/",\n            };\n        }\n\n        return {\n            success: false,\n            error: error || new Error("Invalid email or password"),\n        };\n    },\n    logout: async () => {\n        const { error } = await supabaseClient.auth.signOut();\n\n        if (error) {\n            return {\n                success: false,\n                error: error || new Error("Invalid email or password"),\n            };\n        }\n\n        return {\n            success: true,\n            redirectTo: "/login",\n        };\n    },\n    onError: async (error) => {\n        console.error(error);\n        return { error };\n    },\n    check: async () => {\n        const { data, error } = await supabaseClient.auth.getSession();\n        const { session } = data;\n\n        if (!session) {\n            return {\n                authenticated: false,\n                error: error || new Error("Session not found"),\n                logout: true,\n            };\n        }\n\n        return {\n            authenticated: true,\n        };\n    },\n    getPermissions: async () => {\n        const user = supabaseClient.auth.user();\n\n        if (user) {\n            return user.role;\n        }\n\n        return null;\n    },\n    getUserIdentity: async () => {\n        const user = supabaseClient.auth.user();\n\n        if (user) {\n            return {\n                ...user,\n                name: user.email,\n            };\n        }\n\n        return null;\n    },\n};\n\nexport default authProvider;\n')))),(0,r.kt)("h3",{id:"configure-refine-for-supabase"},"Configure Refine for Supabase"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\n\n//highlight-start\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n//highlight-end\n\nfunction App() {\n    return (\n        <Refine\n            routerProvider={routerProvider}\n            //highlight-start\n            dataProvider={dataProvider(supabaseClient)}\n            authProvider={authProvider}\n            //highlight-end\n        />\n    );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"We've completed our project structure. Now we can easily access our Supabase Database and utilize our data in our user interface. To begin, let's define the React95 library and create a Login page to access our Supabase data."),(0,r.kt)("h3",{id:"react95-setup"},"React95 Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n\n//highlight-start\nimport original from "react95/dist/themes/original";\nimport { ThemeProvider } from "styled-components";\n//highlight-end\n\nfunction App() {\n    return (\n        //highlight-start\n        <ThemeProvider theme={original}>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(supabaseClient)}\n                authProvider={authProvider}\n            />\n        </ThemeProvider>\n        //highlight-end\n    );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"In this step, we imported and defined the React95 library in our Refine project. We can now use React95 components and Refine features together in harmony. Let's design a Windows95-style Login page!"),(0,r.kt)("h2",{id:"refine-login-page"},"Refine Login Page"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/login/LoginPage.tsx"',title:'"src/pages/login/LoginPage.tsx"'},'import { useState } from "react";\n//highlight-start\nimport { useLogin } from "@refinedev/core";\n\nimport {\n    Window,\n    WindowHeader,\n    WindowContent,\n    TextField,\n    Button,\n} from "react95";\n//highlight-end\n\ninterface ILoginForm {\n    username: string;\n    password: string;\n}\n\nexport const LoginPage = () => {\n    const [username, setUsername] = useState("info@refine.dev");\n    const [password, setPassword] = useState("refine-supabase");\n\n    //highlight-next-line\n    const { mutate: login } = useLogin<ILoginForm>();\n\n    return (\n        <div\n            style={{\n                display: "flex",\n                flexDirection: "column",\n                justifyContent: "center",\n                alignItems: "center",\n                textAlign: "center",\n                minHeight: "100vh",\n                backgroundColor: "rgb(0, 128, 128)",\n            }}\n        >\n            //highlight-start\n            <Window>\n                <WindowHeader active={true} className="window-header">\n                    <span> Refine Login</span>\n                </WindowHeader>\n                <div style={{ marginTop: 8 }}>\n                    <img src="./refine.png" alt="refine-logo" width={100} />\n                </div>\n                <WindowContent>\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            login({ username, password });\n                        }}\n                    >\n                        <div style={{ width: 500 }}>\n                            <div style={{ display: "flex" }}>\n                                <TextField\n                                    placeholder="User Name"\n                                    fullWidth\n                                    value={username}\n                                    onChange={(\n                                        e: React.ChangeEvent<HTMLInputElement>,\n                                    ) => {\n                                        setUsername(e.target.value);\n                                    }}\n                                />\n                            </div>\n                            <br />\n                            <TextField\n                                placeholder="Password"\n                                fullWidth\n                                type="password"\n                                value={password}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                ) => {\n                                    setPassword(e.target.value);\n                                }}\n                            />\n                            <br />\n                            <Button type="submit" value="login">\n                                Sign in\n                            </Button>\n                        </div>\n                    </form>\n                </WindowContent>\n            </Window>\n            //highlight-end\n        </div>\n    );\n};\n')))),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/refine_login.png",alt:"Refine Login Page"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"We used React95 components to construct our Login page design. Then, using the ",(0,r.kt)("strong",{parentName:"p"},"refine")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/auth-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"<AuthProvider>"))," ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/authentication/useLogin/"},(0,r.kt)("inlineCode",{parentName:"a"},"<useLogin>"))," hook, we carried out the database sign-in operation. We can now access our database and fetch our Posts and Categories, as well as create our pages."),(0,r.kt)("h2",{id:"refine-post-page"},"Refine Post Page"),(0,r.kt)("p",null,"After our login process, we'll get the posts from our Supabase Database and display them in the table. We will use React95 components for the UI portion of our table, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package to handle pagination, sorting, and filtering. You can use all the features of ",(0,r.kt)("a",{parentName:"p",href:"https://react-table.tanstack.com/"},"TanStack Table")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," adapter. On this page, we will use this adapter of ",(0,r.kt)("strong",{parentName:"p"},"refine")," to manage the table."),(0,r.kt)("p",null,"In this step, we'll show how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package to create a data table. We will begin by examining this page in two parts. In the first step, we'll utilize our ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," package and React95 UI components to only use our data. Then, in the following stage, we'll arrange the sorting, pagination processes and our UI part. Let's start!"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-table/"},"Refer to the ",(0,r.kt)("strong",{parentName:"a"},"refine")," TanStack Table packages documentation for detailed information. \u2192")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Part I Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/post/PostList.tsx"',title:'"src/pages/post/PostList.tsx"'},'import { useMemo } from "react";\nimport { useOne } from "@refinedev/core";\nimport { useTable, ColumnDef, flexRender } from "@refinedev/react-table";\n\nimport { IPost, ICategory } from "interfaces";\nimport {\n    Table,\n    TableBody,\n    TableHead,\n    TableRow,\n    TableHeadCell,\n    TableDataCell,\n    Window,\n    WindowHeader,\n    WindowContent,\n} from "react95";\n\nexport const PostList = () => {\n    //highlight-start\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "categoryId",\n                header: "Category",\n                accessorKey: "categoryId",\n                cell: function render({ getValue }) {\n                    const { data, isLoading } = useOne<ICategory>({\n                        resource: "categories",\n                        id: getValue() as number,\n                    });\n\n                    if (isLoading) {\n                        return <p>loading..</p>;\n                    }\n\n                    return data?.data.title ?? "Not Found";\n                },\n            },\n        ],\n        [],\n    );\n    //highlight-end\n\n    //highlight-start\n    const { getHeaderGroups, getRowModel } = useTable<IPost>({ columns });\n    //highlight-end\n\n    return (\n        <>\n            //highlight-start\n            <Window style={{ width: "100%" }}>\n                <WindowHeader>Posts</WindowHeader>\n                <WindowContent>\n                    <Table>\n                        <TableHead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <TableRow\n                                    key={headerGroup.id}\n                                    style={{ overflowX: "auto" }}\n                                >\n                                    {headerGroup.headers.map((header) => (\n                                        <TableHeadCell\n                                            key={header.id}\n                                            colSpan={header.colSpan}\n                                        >\n                                            {flexRender(\n                                                header.column.columnDef.header,\n                                                header.getContext(),\n                                            )}\n                                        </TableHeadCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableHead>\n                        <TableBody {...getTableBodyProps()}>\n                            {rows.map((row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <TableRow {...row.getRowProps()}>\n                                        {row.cells.map((cell) => {\n                                            return (\n                                                <TableDataCell\n                                                    {...cell.getCellProps()}\n                                                >\n                                                    {cell.render("Cell")}\n                                                </TableDataCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </WindowContent>\n            </Window>\n            //highlight-end\n        </>\n    );\n};\n')))),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/table.png",alt:"Refine Table"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"As you can see, our first step is complete. Thanks to the ",(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/react-table")," adapter, we fetch our Supabase data and process as table data. Then we placed this data in React95 components. Now let's move on to the second step."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Part II Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/post/PostList.tsx"',title:'"src/pages/post/PostList.tsx"'},'import { useMemo, useRef, useState } from "react";\nimport { useOne, useNavigation, useDelete } from "@refinedev/core";\nimport { useTable, ColumnDef, flexRender } from "@refinedev/react-table";\n\nimport { IPost, ICategory } from "interfaces";\nimport {\n    Table,\n    TableBody,\n    TableHead,\n    TableRow,\n    TableHeadCell,\n    TableDataCell,\n    Window,\n    WindowHeader,\n    WindowContent,\n    Button,\n    Select,\n    NumberField,\n    Progress,\n} from "react95";\n\nexport const PostList = () => {\n    const { edit, create } = useNavigation();\n    const { mutate } = useDelete();\n\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n            },\n            {\n                id: "categoryId",\n                header: "Category",\n                accessorKey: "categoryId",\n                cell: function render({ getValue }) {\n                    const { data, isLoading } = useOne<ICategory>({\n                        resource: "categories",\n                        id: getValue() as number,\n                    });\n\n                    if (isLoading) {\n                        return <p>loading..</p>;\n                    }\n\n                    return data?.data.title ?? "Not Found";\n                },\n            },\n            //highlight-start\n            {\n                id: "action",\n                header: "Action",\n                accessorKey: "id",\n                cell: function render({ getValue }) {\n                    return (\n                        <Button\n                            onClick={() => edit("posts", getValue() as number)}\n                        >\n                            Edit\n                        </Button>\n                    );\n                },\n            },\n            //highlight-end\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        //highlight-start\n        options: { pageCount },\n        getState,\n        setPageIndex,\n        setPageSize,\n        //highlight-end\n    } = useTable<IPost>({ columns });\n\n    return (\n        <>\n            <Window style={{ width: "100%" }}>\n                <WindowHeader>Posts</WindowHeader>\n                <WindowContent>\n                    <Table {...getTableProps()}>\n                        <TableHead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <TableRow\n                                    key={headerGroup.id}\n                                    style={{ overflowX: "auto" }}\n                                >\n                                    {headerGroup.headers.map((header) => (\n                                        <TableHeadCell\n                                            key={header.id}\n                                            colSpan={header.colSpan}\n                                            //highlight-next-line\n                                            onClick={header.column.getToggleSortingHandler()}\n                                        >\n                                            {flexRender(\n                                                header.column.columnDef.header,\n                                                header.getContext(),\n                                            )}\n                                        </TableHeadCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableHead>\n                        <TableBody {...getTableBodyProps()}>\n                            {rows.map((row, i) => {\n                                prepareRow(row);\n                                return (\n                                    <TableRow {...row.getRowProps()}>\n                                        {row.cells.map((cell) => {\n                                            return (\n                                                <TableDataCell\n                                                    {...cell.getCellProps()}\n                                                >\n                                                    {cell.render("Cell")}\n                                                </TableDataCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                        </TableBody>\n                    </Table>\n                </WindowContent>\n                //highlight-start\n                <div\n                    style={{\n                        display: "flex",\n                        justifyContent: "flex-end",\n                        marginBottom: 8,\n                        marginTop: 8,\n                        alignItems: "flex-end",\n                    }}\n                >\n                    <Select\n                        style={{ marginLeft: 8 }}\n                        value={getState().pagination.pageSize}\n                        onChange={(_: any, selection: any) => {\n                            setPageSize(selection.value);\n                        }}\n                        options={opt}\n                        defaultValue={"10"}\n                    ></Select>\n                    <span style={{ marginLeft: 8 }}>\n                        Page{" "}\n                        <strong>\n                            {getState().pagination.pageIndex + 1} of {pageCount}\n                        </strong>\n                        <span style={{ marginLeft: 8 }}>\n                            Go to page:\n                            <NumberField\n                                style={{ marginLeft: 8 }}\n                                min={1}\n                                defaultValue={\n                                    getState().pagination.pageIndex + 1\n                                }\n                                width={130}\n                                onChange={(value: any) => {\n                                    const page = value ? Number(value) - 1 : 0;\n                                    setPageIndex(page);\n                                }}\n                            />\n                        </span>\n                    </span>\n                </div>\n                //highlight-end\n            </Window>\n        </>\n    );\n};\n\nexport const opt = [\n    { value: 10, label: "10" },\n    { value: 20, label: "20" },\n    { value: 30, label: "30" },\n    { value: 40, label: "40" },\n];\n')))),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/advanced_table.gif",alt:"Refine Table"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"You may quickly handle sorting and paging operations by simply adding a few lines thanks to ",(0,r.kt)("strong",{parentName:"p"},"refine"),"'s out-of-the-box features. We have completed our Post page by adding the pagination and sorting features provided by the Refine ",(0,r.kt)("inlineCode",{parentName:"p"},"useTable")," hook to our table."),(0,r.kt)("h2",{id:"refine-create-and-edit-page"},"Refine Create and Edit Page"),(0,r.kt)("p",null,"We have created our post page. Now we will create pages where we can create and edit posts. ",(0,r.kt)("strong",{parentName:"p"},"refine")," provides a ",(0,r.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},(0,r.kt)("inlineCode",{parentName:"a"},"refine-react-hook-form"))," adapter that you can use with the headless feature. All the features of ",(0,r.kt)("a",{parentName:"p",href:"https://react-hook-form.com/"},"React Hook Form")," work in harmony with ",(0,r.kt)("strong",{parentName:"p"},"refine")," and the form you will create."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Create Page"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/Create.tsx"',title:'"src/pages/posts/Create.tsx"'},'import { Controller, useForm } from "@refinedev/react-hook-form";\nimport { useSelect, useNavigation } from "@refinedev/core";\nimport {\n    Select,\n    Fieldset,\n    Button,\n    TextField,\n    Window,\n    WindowHeader,\n    WindowContent,\n    ListItem,\n} from "react95";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading },\n        register,\n        handleSubmit,\n        control,\n        formState: { errors },\n    } = useForm();\n\n    const { goBack } = useNavigation();\n\n    const { options } = useSelect({\n        resource: "categories",\n    });\n\n    return (\n        <>\n            <Window style={{ width: "100%", height: "100%" }}>\n                <WindowHeader active={true} className="window-header">\n                    <span>Create Post</span>\n                </WindowHeader>\n                <form onSubmit={handleSubmit(onFinish)}>\n                    <WindowContent>\n                        <label>Title: </label>\n                        <br />\n                        <br />\n                        <TextField\n                            {...register("title", { required: true })}\n                            placeholder="Type here..."\n                        />\n                        {errors.title && <span>This field is required</span>}\n                        <br />\n                        <br />\n\n                        <Controller\n                            {...register("categoryId", { required: true })}\n                            control={control}\n                            render={({ field: { onChange, value } }) => (\n                                <Fieldset label={"Category"}>\n                                    <Select\n                                        options={options}\n                                        menuMaxHeight={160}\n                                        width={160}\n                                        variant="flat"\n                                        onChange={onChange}\n                                        value={value}\n                                    />\n                                </Fieldset>\n                            )}\n                        />\n                        {errors.category && <span>This field is required</span>}\n                        <br />\n                        <label>Content: </label>\n                        <br />\n                        <TextField\n                            {...register("content", { required: true })}\n                            multiline\n                            rows={10}\n                            cols={50}\n                        />\n\n                        {errors.content && <span>This field is required</span>}\n                        <br />\n                        <Button type="submit" value="Submit">\n                            Submit\n                        </Button>\n                        {formLoading && <p>Loading</p>}\n                    </WindowContent>\n                </form>\n            </Window>\n        </>\n    );\n};\n')))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Edit Page"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/posts/Edit.tsx"',title:'"src/pages/posts/Edit.tsx"'},'import { useEffect } from "react";\nimport { Controller, useForm } from "@refinedev/react-hook-form";\nimport { useSelect, useNavigation } from "@refinedev/core";\nimport {\n    Select,\n    Fieldset,\n    Button,\n    TextField,\n    WindowContent,\n    Window,\n    WindowHeader,\n    ListItem,\n} from "react95";\n\nexport const PostEdit: React.FC = () => {\n    const {\n        refineCore: { onFinish, formLoading, queryResult },\n        register,\n        handleSubmit,\n        resetField,\n        control,\n        formState: { errors },\n    } = useForm();\n\n    const { goBack } = useNavigation();\n\n    const { options } = useSelect({\n        resource: "categories",\n        defaultValue: queryResult?.data?.data.categoryId,\n    });\n\n    useEffect(() => {\n        resetField("categoryId");\n    }, [options]);\n\n    return (\n        <>\n            <Window style={{ width: "100%", height: "100%" }}>\n                <form onSubmit={handleSubmit(onFinish)}>\n                    <WindowHeader active={true} className="window-header">\n                        <span>Edit Post</span>\n                    </WindowHeader>\n                    <WindowContent>\n                        <label>Title: </label>\n                        <br />\n                        <TextField\n                            {...register("title", { required: true })}\n                            placeholder="Type here..."\n                        />\n                        {errors.title && <span>This field is required</span>}\n                        <br />\n                        <br />\n\n                        <Controller\n                            {...register("categoryId", { required: true })}\n                            control={control}\n                            render={({ field: { onChange, value } }) => (\n                                <Fieldset label={"Category"}>\n                                    <Select\n                                        options={options}\n                                        menuMaxHeight={160}\n                                        width={160}\n                                        variant="flat"\n                                        onChange={onChange}\n                                        value={value}\n                                    />\n                                </Fieldset>\n                            )}\n                        />\n                        {errors.category && <span>This field is required</span>}\n                        <br />\n                        <label>Content: </label>\n                        <br />\n                        <TextField\n                            {...register("content", { required: true })}\n                            multiline\n                            rows={10}\n                            cols={50}\n                        />\n\n                        {errors.content && <span>This field is required</span>}\n                        <br />\n                        <Button type="submit" value="Submit">\n                            Submit\n                        </Button>\n                        {formLoading && <p>Loading</p>}\n                    </WindowContent>\n                </form>\n            </Window>\n        </>\n    );\n};\n')))),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/create_edit.gif",alt:"Refine Create and Edit Page"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"We can manage our forms and generate Posts thanks to the ",(0,r.kt)("inlineCode",{parentName:"p"},"refine-react-hook-form")," adapter, and we may save the Post that we created with the ",(0,r.kt)("strong",{parentName:"p"},"refine")," ",(0,r.kt)("inlineCode",{parentName:"p"},"onFinish")," method directly to Supabase."),(0,r.kt)("h2",{id:"customize-refine-layout"},"Customize Refine Layout"),(0,r.kt)("p",null,"Our app is almost ready. As a final step, let's edit our Layout to make our application more like Window95. Let's create a footer component first and then define it as a ",(0,r.kt)("strong",{parentName:"p"},"refine")," Layout."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/advanced-tutorials/custom-layout/"},"Refer to the refine Custom Layout docs for detailed usage. \u2192")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Footer"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Footer.tsx"',title:'"components/Footer.tsx"'},'import React, { useState } from "react";\nimport { useLogout, useNavigation } from "@refinedev/core";\nimport { AppBar, Toolbar, Button, List, ListItem } from "react95";\n\nexport const Footer: React.FC = () => {\n    const [open, setOpen] = useState(false);\n\n    const { mutate: logout } = useLogout();\n    const { push } = useNavigation();\n\n    return (\n        <AppBar style={{ top: "unset", bottom: 0 }}>\n            <Toolbar style={{ justifyContent: "space-between" }}>\n                <div style={{ position: "relative", display: "inline-block" }}>\n                    <Button\n                        onClick={() => setOpen(!open)}\n                        active={open}\n                        style={{ fontWeight: "bold" }}\n                    >\n                        <img\n                            src={"./refine.png"}\n                            alt="refine logo"\n                            style={{ height: "20px", marginRight: 4 }}\n                        />\n                    </Button>\n                    {open && (\n                        <List\n                            style={{\n                                position: "absolute",\n                                left: "0",\n                                bottom: "100%",\n                            }}\n                            onClick={() => setOpen(false)}\n                        >\n                            <ListItem\n                                onClick={() => {\n                                    push("posts");\n                                }}\n                            >\n                                Posts\n                            </ListItem>\n                            <ListItem\n                                onClick={() => {\n                                    push("categories");\n                                }}\n                            >\n                                Categories\n                            </ListItem>\n                            <ListItem\n                                onClick={() => {\n                                    logout();\n                                }}\n                            >\n                                <span role="img" aria-label="\ud83d\udd19">\n                                    \ud83d\udd19\n                                </span>\n                                Logout\n                            </ListItem>\n                        </List>\n                    )}\n                </div>\n            </Toolbar>\n        </AppBar>\n    );\n};\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n\nimport original from "react95/dist/themes/original";\nimport { ThemeProvider } from "styled-components";\n\nimport { PostList, PostEdit, PostCreate } from "pages/posts";\nimport { CategoryList, CategoryCreate, CategoryEdit } from "pages/category";\nimport { LoginPage } from "pages/login";\n//highlight-next-line\nimport { Footer } from "./components/footer";\n\nimport "./app.css";\n\nfunction App() {\n    return (\n        <ThemeProvider theme={original}>\n            <Refine\n                routerProvider={routerProvider}\n                dataProvider={dataProvider(supabaseClient)}\n                authProvider={authProvider}\n                LoginPage={LoginPage}\n                //highlight-start\n                Layout={({ children }) => {\n                    return (\n                        <div className="main">\n                            <div className="layout">{children}</div>\n                            <div>\n                                <Footer />\n                            </div>\n                        </div>\n                    );\n                }}\n                //highlight-end\n                resources={[\n                    {\n                        name: "posts",\n                        list: PostList,\n                        create: PostCreate,\n                        edit: PostEdit,\n                    },\n                ]}\n            />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n')),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/menu.gif",alt:"Refine95 Menu"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Now we'll make a top menu component that's specific to the Windows 95 design."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Top Menu")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/bar/TopMenu"',title:'"components/bar/TopMenu"'},'import React, { useState } from "react";\nimport { AppBar, Toolbar, Button, List } from "react95";\n\ntype TopMenuProps = {\n    children: React.ReactNode[] | React.ReactNode;\n};\n\nexport const TopMenu: React.FC<TopMenuProps> = ({ children }) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <AppBar style={{ zIndex: 1 }}>\n            <Toolbar>\n                <Button\n                    variant="menu"\n                    onClick={() => setOpen(!open)}\n                    active={open}\n                >\n                    File\n                </Button>\n                <Button variant="menu" disabled>\n                    Edit\n                </Button>\n                <Button variant="menu" disabled>\n                    View\n                </Button>\n                <Button variant="menu" disabled>\n                    Format\n                </Button>\n                <Button variant="menu" disabled>\n                    Tools\n                </Button>\n                <Button variant="menu" disabled>\n                    Table\n                </Button>\n                <Button variant="menu" disabled>\n                    Window\n                </Button>\n                <Button variant="menu" disabled>\n                    Help\n                </Button>\n                {open && (\n                    <List\n                        style={{\n                            position: "absolute",\n                            left: "0",\n                            top: "100%",\n                        }}\n                        onClick={() => setOpen(false)}\n                    >\n                        {children}\n                    </List>\n                )}\n            </Toolbar>\n        </AppBar>\n    );\n};\n')))),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/top_menu.gif",alt:"Refine Top Menu"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"project-overview"},"Project Overview"),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-03-22-refine-with-react95/overview.gif",alt:"Refine Project Overview"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,r.kt)("iframe",{src:"https://codesandbox.io/embed/refine-react95-example-beie0q?autoresize=1&fontsize=14&theme=dark&view=preview",style:{width:"100%",height:"80vh",border:"0px",borderRadius:"8px",overflow:"hidden"},title:"refine-react95-example",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," is a very powerful and flexible internal tool development framework. The features it provides will greatly reduce your development time. In this example, we have shown step-by-step how a development can be quick and easy using a custom UI and refine-core features. ",(0,r.kt)("strong",{parentName:"p"},"refine")," does not restrict you, and it delivers almost all of your project's requirements via the hooks it provides, regardless of the UI."))}m.isMDXComponent=!0}}]);